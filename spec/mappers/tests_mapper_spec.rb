describe "TestsMapper" do
  # HINT: Testing meta class generated by ArrayXmlMapperBuilder.
  let(:test_mapper_args) { {string: "string_value"} }
  let(:test_mapper) {
    stub_const("TestMapper",
      Class.new(ShaleCustom::Mapper) { attribute :string, Shale::Type::String })
  }
  let(:tests_mapper_class) { Object.const_get(:TestsMapper) }

  let(:tests_mapper_class_from_array_xml_mapper_builder) {
    ArrayXmlMapperBuilder.new(test_mapper, []).send(:klass_with_attribute)
  }

  describe ".new" do
    subject { tests_mapper_class_from_array_xml_mapper_builder.new }

    it { is_expected.to be_a tests_mapper_class }
  end

  describe "#to_xml" do
    subject(:to_xml) { tests_mapper_from_array_xml_mapper_builder.to_xml }

    context "with no_args" do
      let(:tests_mapper_from_array_xml_mapper_builder) { tests_mapper_class_from_array_xml_mapper_builder.new }

      it { is_expected.to eq "<tests/>" }
    end

    context "with empty array" do
      let(:tests_mapper_from_array_xml_mapper_builder) { tests_mapper_class_from_array_xml_mapper_builder.new(test: []) }

      it { is_expected.to eq "<tests/>" }
    end

    context "with one arg" do
      let(:tests_mapper_from_array_xml_mapper_builder) {
        tests_mapper_class_from_array_xml_mapper_builder.new(test: [test_mapper.new(**test_mapper_args)])
      }

      it { is_expected.to eq "<tests><test><string>string_value</string></test></tests>" }
    end

    context "with multiple args" do
      let(:tests_mapper_from_array_xml_mapper_builder) {
        tests_mapper_class_from_array_xml_mapper_builder
          .new(test: [test_mapper.new(**test_mapper_args), test_mapper.new(**test_mapper_args)])
      }

      it { is_expected.to eq "<tests><test><string>string_value</string></test><test><string>string_value</string></test></tests>" }
    end
  end

  describe "#to_json" do
    subject(:to_json) { tests_mapper_from_array_xml_mapper_builder.to_json }

    context "with no_args" do
      let(:tests_mapper_from_array_xml_mapper_builder) {
        tests_mapper_class_from_array_xml_mapper_builder.new
      }

      it { is_expected.to eq "{\"test\":[]}" }
    end

    context "with empty array" do
      let(:tests_mapper_from_array_xml_mapper_builder) {
        tests_mapper_class_from_array_xml_mapper_builder.new(test: [])
      }

      it { is_expected.to eq "{\"test\":[]}" }
    end

    context "with one arg" do
      let(:tests_mapper_from_array_xml_mapper_builder) {
        tests_mapper_class_from_array_xml_mapper_builder.new(test: [test_mapper.new(**test_mapper_args)])
      }

      it { is_expected.to eq "{\"test\":[{\"string\":\"string_value\"}]}" }
    end

    context "with multiple arg" do
      let(:tests_mapper_from_array_xml_mapper_builder) {
        tests_mapper_class_from_array_xml_mapper_builder
          .new(test: [test_mapper.new(**test_mapper_args), test_mapper.new(**test_mapper_args)])
      }

      it { is_expected.to eq "{\"test\":[{\"string\":\"string_value\"},{\"string\":\"string_value\"}]}" }
    end
  end
end
